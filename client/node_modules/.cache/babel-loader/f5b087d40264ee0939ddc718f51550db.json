{"ast":null,"code":"var _jsxFileName = \"D:\\\\BABOGA\\\\SYSAN\\\\client\\\\src\\\\components\\\\panel\\\\Lists\\\\Tables\\\\ProblemTable.js\";\nimport React from 'react';\nimport { Table, Progress, Badge } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { checkRole, getId } from '../../../../helpers/checkAuth';\nconst role = checkRole();\nconst id = getId();\nconst columns = [{\n  title: 'ID',\n  dataIndex: 'Id',\n  key: 'Id',\n  sorter: (a, b) => a.Id - b.Id,\n  sortDirections: ['ascend', 'descend'],\n  defaultSortOrder: 'ascend'\n}, {\n  title: 'Название',\n  dataIndex: 'name',\n  key: 'name',\n  render: (text, record) => /*#__PURE__*/React.createElement(Link, {\n    to: role === 'analyst' ? `/analyst/problem/${record._id}` : role === 'expert' ? `/expert/problem/${record._id}` : '/403',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, text),\n  sorter: (a, b) => a.name.localeCompare(b.name),\n  sortDirections: ['ascend', 'descend']\n}, {\n  title: 'Прогресс',\n  dataIndex: 'progress',\n  key: 'progress',\n  render: (text, record) => /*#__PURE__*/React.createElement(Progress, {\n    width: 33,\n    type: \"circle\",\n    percent: text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, text),\n  sorter: (a, b) => a.progress - b.progress,\n  sortDirections: ['ascend', 'descend']\n}, {\n  title: 'Статус',\n  dataIndex: 'status',\n  key: 'status',\n  filters: [{\n    text: 'Открыта',\n    value: 'Открыта'\n  }, {\n    text: 'Решается',\n    value: 'Решается'\n  }, {\n    text: 'Решена',\n    value: 'Решена'\n  }],\n  render: (text, record) => /*#__PURE__*/React.createElement(Badge, {\n    status: text === 'Открыта' ? 'default' : text === 'Решается' ? 'processing' : 'success',\n    text: text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }),\n  onFilter: (value, record) => record.status.indexOf(value) === 0\n}];\n\nfunction ProblemTable({\n  data\n}) {\n  if (data === '') data = [];\n  role === 'analyst' ? data = data.filter(record => record.analyst === id) : data = data.filter(record => record.experts.find(expert => expert.id === id));\n  data.forEach((record, k) => {\n    record.Id = k + 1;\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Table, {\n    locale: {\n      emptyText: 'Нет данных'\n    },\n    className: \"clearfix\",\n    columns: columns,\n    rowKey: \"Id\",\n    dataSource: data,\n    style: {\n      clear: 'both'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default ProblemTable;","map":{"version":3,"sources":["D:/BABOGA/SYSAN/client/src/components/panel/Lists/Tables/ProblemTable.js"],"names":["React","Table","Progress","Badge","Link","checkRole","getId","role","id","columns","title","dataIndex","key","sorter","a","b","Id","sortDirections","defaultSortOrder","render","text","record","_id","name","localeCompare","progress","filters","value","onFilter","status","indexOf","ProblemTable","data","filter","analyst","experts","find","expert","forEach","k","emptyText","clear"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Table, Progress, Badge } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { checkRole, getId } from '../../../../helpers/checkAuth';\n\nconst role = checkRole();\nconst id = getId();\n\nconst columns = [\n  {\n    title: 'ID',\n    dataIndex: 'Id',\n    key: 'Id',\n    sorter: (a, b) => a.Id - b.Id,\n    sortDirections: ['ascend', 'descend'],\n    defaultSortOrder: 'ascend'\n  },\n  {\n    title: 'Название',\n    dataIndex: 'name',\n    key: 'name',\n    render: (text, record) => (\n      <Link\n        to={\n          role === 'analyst'\n            ? `/analyst/problem/${record._id}`\n            : role === 'expert'\n            ? `/expert/problem/${record._id}`\n            : '/403'\n        }\n      >\n        {text}\n      </Link>\n    ),\n    sorter: (a, b) => a.name.localeCompare(b.name),\n    sortDirections: ['ascend', 'descend']\n  },\n\n  {\n    title: 'Прогресс',\n    dataIndex: 'progress',\n    key: 'progress',\n    render: (text, record) => (\n      <Progress width={33} type=\"circle\" percent={text}>\n        {text}\n      </Progress>\n    ),\n    sorter: (a, b) => a.progress - b.progress,\n    sortDirections: ['ascend', 'descend']\n  },\n\n  {\n    title: 'Статус',\n    dataIndex: 'status',\n    key: 'status',\n    filters: [\n      {\n        text: 'Открыта',\n        value: 'Открыта'\n      },\n      {\n        text: 'Решается',\n        value: 'Решается'\n      },\n      {\n        text: 'Решена',\n        value: 'Решена'\n      }\n    ],\n    render: (text, record) => (\n      <Badge\n        status={\n          text === 'Открыта'\n            ? 'default'\n            : text === 'Решается'\n            ? 'processing'\n            : 'success'\n        }\n        text={text}\n      />\n    ),\n    onFilter: (value, record) => record.status.indexOf(value) === 0\n  }\n];\n\nfunction ProblemTable({ data }) {\n  if (data === '') data = [];\n  role === 'analyst'\n    ? (data = data.filter((record) => record.analyst === id))\n    : (data = data.filter((record) =>\n        record.experts.find((expert) => expert.id === id)\n      ));\n  data.forEach((record, k) => {\n    record.Id = k + 1;\n  });\n  return (\n    <>\n      <Table\n        locale={{ emptyText: 'Нет данных' }}\n        className=\"clearfix\"\n        columns={columns}\n        rowKey=\"Id\"\n        dataSource={data}\n        style={{ clear: 'both' }}\n      />\n    </>\n  );\n}\n\nexport default ProblemTable;\n"]},"metadata":{},"sourceType":"module"}